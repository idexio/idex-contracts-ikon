/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type BalanceStruct = {
  isMigrated: PromiseOrValue<boolean>;
  balanceInPips: PromiseOrValue<BigNumberish>;
  lastUpdateTimestampInMs: PromiseOrValue<BigNumberish>;
};

export type BalanceStructOutput = [boolean, BigNumber, BigNumber] & {
  isMigrated: boolean;
  balanceInPips: BigNumber;
  lastUpdateTimestampInMs: BigNumber;
};

export interface IExchangeInterface extends utils.Interface {
  functions: {
    "_depositIndex()": FunctionFragment;
    "loadBalanceBySymbol(address,string)": FunctionFragment;
    "loadBalanceInPipsBySymbol(address,string)": FunctionFragment;
    "loadCustodian()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_depositIndex"
      | "loadBalanceBySymbol"
      | "loadBalanceInPipsBySymbol"
      | "loadCustodian"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_depositIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "loadBalanceBySymbol",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "loadBalanceInPipsBySymbol",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "loadCustodian",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_depositIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loadBalanceBySymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loadBalanceInPipsBySymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loadCustodian",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IExchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _depositIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    loadBalanceBySymbol(
      wallet: PromiseOrValue<string>,
      assetSymbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BalanceStructOutput]>;

    loadBalanceInPipsBySymbol(
      wallet: PromiseOrValue<string>,
      assetSymbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    loadCustodian(overrides?: CallOverrides): Promise<[string]>;
  };

  _depositIndex(overrides?: CallOverrides): Promise<BigNumber>;

  loadBalanceBySymbol(
    wallet: PromiseOrValue<string>,
    assetSymbol: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BalanceStructOutput>;

  loadBalanceInPipsBySymbol(
    wallet: PromiseOrValue<string>,
    assetSymbol: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  loadCustodian(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _depositIndex(overrides?: CallOverrides): Promise<BigNumber>;

    loadBalanceBySymbol(
      wallet: PromiseOrValue<string>,
      assetSymbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BalanceStructOutput>;

    loadBalanceInPipsBySymbol(
      wallet: PromiseOrValue<string>,
      assetSymbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loadCustodian(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    _depositIndex(overrides?: CallOverrides): Promise<BigNumber>;

    loadBalanceBySymbol(
      wallet: PromiseOrValue<string>,
      assetSymbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loadBalanceInPipsBySymbol(
      wallet: PromiseOrValue<string>,
      assetSymbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loadCustodian(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _depositIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loadBalanceBySymbol(
      wallet: PromiseOrValue<string>,
      assetSymbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loadBalanceInPipsBySymbol(
      wallet: PromiseOrValue<string>,
      assetSymbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loadCustodian(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
