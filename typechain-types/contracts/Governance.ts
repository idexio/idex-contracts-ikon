/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface GovernanceInterface extends utils.Interface {
  functions: {
    "cancelExchangeUpgrade()": FunctionFragment;
    "cancelGovernanceUpgrade()": FunctionFragment;
    "finalizeExchangeUpgrade(address)": FunctionFragment;
    "finalizeGovernanceUpgrade(address)": FunctionFragment;
    "initiateExchangeUpgrade(address)": FunctionFragment;
    "initiateGovernanceUpgrade(address)": FunctionFragment;
    "removeAdmin()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setCustodian(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelExchangeUpgrade"
      | "cancelGovernanceUpgrade"
      | "finalizeExchangeUpgrade"
      | "finalizeGovernanceUpgrade"
      | "initiateExchangeUpgrade"
      | "initiateGovernanceUpgrade"
      | "removeAdmin"
      | "setAdmin"
      | "setCustodian"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelExchangeUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelGovernanceUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeExchangeUpgrade",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeGovernanceUpgrade",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateExchangeUpgrade",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateGovernanceUpgrade",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCustodian",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelExchangeUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelGovernanceUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeExchangeUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeGovernanceUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateExchangeUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateGovernanceUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCustodian",
    data: BytesLike
  ): Result;

  events: {
    "ExchangeUpgradeCanceled(address,address)": EventFragment;
    "ExchangeUpgradeFinalized(address,address)": EventFragment;
    "ExchangeUpgradeInitiated(address,address,uint256)": EventFragment;
    "GovernanceUpgradeCanceled(address,address)": EventFragment;
    "GovernanceUpgradeFinalized(address,address)": EventFragment;
    "GovernanceUpgradeInitiated(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExchangeUpgradeCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeUpgradeFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeUpgradeInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceUpgradeCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceUpgradeFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceUpgradeInitiated"): EventFragment;
}

export interface ExchangeUpgradeCanceledEventObject {
  oldExchange: string;
  newExchange: string;
}
export type ExchangeUpgradeCanceledEvent = TypedEvent<
  [string, string],
  ExchangeUpgradeCanceledEventObject
>;

export type ExchangeUpgradeCanceledEventFilter =
  TypedEventFilter<ExchangeUpgradeCanceledEvent>;

export interface ExchangeUpgradeFinalizedEventObject {
  oldExchange: string;
  newExchange: string;
}
export type ExchangeUpgradeFinalizedEvent = TypedEvent<
  [string, string],
  ExchangeUpgradeFinalizedEventObject
>;

export type ExchangeUpgradeFinalizedEventFilter =
  TypedEventFilter<ExchangeUpgradeFinalizedEvent>;

export interface ExchangeUpgradeInitiatedEventObject {
  oldExchange: string;
  newExchange: string;
  blockThreshold: BigNumber;
}
export type ExchangeUpgradeInitiatedEvent = TypedEvent<
  [string, string, BigNumber],
  ExchangeUpgradeInitiatedEventObject
>;

export type ExchangeUpgradeInitiatedEventFilter =
  TypedEventFilter<ExchangeUpgradeInitiatedEvent>;

export interface GovernanceUpgradeCanceledEventObject {
  oldGovernance: string;
  newGovernance: string;
}
export type GovernanceUpgradeCanceledEvent = TypedEvent<
  [string, string],
  GovernanceUpgradeCanceledEventObject
>;

export type GovernanceUpgradeCanceledEventFilter =
  TypedEventFilter<GovernanceUpgradeCanceledEvent>;

export interface GovernanceUpgradeFinalizedEventObject {
  oldGovernance: string;
  newGovernance: string;
}
export type GovernanceUpgradeFinalizedEvent = TypedEvent<
  [string, string],
  GovernanceUpgradeFinalizedEventObject
>;

export type GovernanceUpgradeFinalizedEventFilter =
  TypedEventFilter<GovernanceUpgradeFinalizedEvent>;

export interface GovernanceUpgradeInitiatedEventObject {
  oldGovernance: string;
  newGovernance: string;
  blockThreshold: BigNumber;
}
export type GovernanceUpgradeInitiatedEvent = TypedEvent<
  [string, string, BigNumber],
  GovernanceUpgradeInitiatedEventObject
>;

export type GovernanceUpgradeInitiatedEventFilter =
  TypedEventFilter<GovernanceUpgradeInitiatedEvent>;

export interface Governance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovernanceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelExchangeUpgrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelGovernanceUpgrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalizeExchangeUpgrade(
      newExchange: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalizeGovernanceUpgrade(
      newGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initiateExchangeUpgrade(
      newExchange: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initiateGovernanceUpgrade(
      newGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCustodian(
      newCustodian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  cancelExchangeUpgrade(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelGovernanceUpgrade(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalizeExchangeUpgrade(
    newExchange: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalizeGovernanceUpgrade(
    newGovernance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initiateExchangeUpgrade(
    newExchange: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initiateGovernanceUpgrade(
    newGovernance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAdmin(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCustodian(
    newCustodian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelExchangeUpgrade(overrides?: CallOverrides): Promise<void>;

    cancelGovernanceUpgrade(overrides?: CallOverrides): Promise<void>;

    finalizeExchangeUpgrade(
      newExchange: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeGovernanceUpgrade(
      newGovernance: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateExchangeUpgrade(
      newExchange: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateGovernanceUpgrade(
      newGovernance: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAdmin(overrides?: CallOverrides): Promise<void>;

    setAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCustodian(
      newCustodian: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ExchangeUpgradeCanceled(address,address)"(
      oldExchange?: null,
      newExchange?: null
    ): ExchangeUpgradeCanceledEventFilter;
    ExchangeUpgradeCanceled(
      oldExchange?: null,
      newExchange?: null
    ): ExchangeUpgradeCanceledEventFilter;

    "ExchangeUpgradeFinalized(address,address)"(
      oldExchange?: null,
      newExchange?: null
    ): ExchangeUpgradeFinalizedEventFilter;
    ExchangeUpgradeFinalized(
      oldExchange?: null,
      newExchange?: null
    ): ExchangeUpgradeFinalizedEventFilter;

    "ExchangeUpgradeInitiated(address,address,uint256)"(
      oldExchange?: null,
      newExchange?: null,
      blockThreshold?: null
    ): ExchangeUpgradeInitiatedEventFilter;
    ExchangeUpgradeInitiated(
      oldExchange?: null,
      newExchange?: null,
      blockThreshold?: null
    ): ExchangeUpgradeInitiatedEventFilter;

    "GovernanceUpgradeCanceled(address,address)"(
      oldGovernance?: null,
      newGovernance?: null
    ): GovernanceUpgradeCanceledEventFilter;
    GovernanceUpgradeCanceled(
      oldGovernance?: null,
      newGovernance?: null
    ): GovernanceUpgradeCanceledEventFilter;

    "GovernanceUpgradeFinalized(address,address)"(
      oldGovernance?: null,
      newGovernance?: null
    ): GovernanceUpgradeFinalizedEventFilter;
    GovernanceUpgradeFinalized(
      oldGovernance?: null,
      newGovernance?: null
    ): GovernanceUpgradeFinalizedEventFilter;

    "GovernanceUpgradeInitiated(address,address,uint256)"(
      oldGovernance?: null,
      newGovernance?: null,
      blockThreshold?: null
    ): GovernanceUpgradeInitiatedEventFilter;
    GovernanceUpgradeInitiated(
      oldGovernance?: null,
      newGovernance?: null,
      blockThreshold?: null
    ): GovernanceUpgradeInitiatedEventFilter;
  };

  estimateGas: {
    cancelExchangeUpgrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelGovernanceUpgrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalizeExchangeUpgrade(
      newExchange: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalizeGovernanceUpgrade(
      newGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initiateExchangeUpgrade(
      newExchange: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initiateGovernanceUpgrade(
      newGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCustodian(
      newCustodian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelExchangeUpgrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelGovernanceUpgrade(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalizeExchangeUpgrade(
      newExchange: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalizeGovernanceUpgrade(
      newGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initiateExchangeUpgrade(
      newExchange: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initiateGovernanceUpgrade(
      newGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCustodian(
      newCustodian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
