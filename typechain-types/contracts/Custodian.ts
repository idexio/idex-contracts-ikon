/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface CustodianInterface extends utils.Interface {
  functions: {
    "loadExchange()": FunctionFragment;
    "loadGovernance()": FunctionFragment;
    "removeAdmin()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setExchange(address)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "loadExchange"
      | "loadGovernance"
      | "removeAdmin"
      | "setAdmin"
      | "setExchange"
      | "setGovernance"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "loadExchange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "loadGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExchange",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "loadExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loadGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "ExchangeChanged(address,address)": EventFragment;
    "GovernanceChanged(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExchangeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceChanged"): EventFragment;
}

export interface ExchangeChangedEventObject {
  oldExchange: string;
  newExchange: string;
}
export type ExchangeChangedEvent = TypedEvent<
  [string, string],
  ExchangeChangedEventObject
>;

export type ExchangeChangedEventFilter = TypedEventFilter<ExchangeChangedEvent>;

export interface GovernanceChangedEventObject {
  oldGovernance: string;
  newGovernance: string;
}
export type GovernanceChangedEvent = TypedEvent<
  [string, string],
  GovernanceChangedEventObject
>;

export type GovernanceChangedEventFilter =
  TypedEventFilter<GovernanceChangedEvent>;

export interface Custodian extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CustodianInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    loadExchange(overrides?: CallOverrides): Promise<[string]>;

    loadGovernance(overrides?: CallOverrides): Promise<[string]>;

    removeAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExchange(
      newExchange: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      newGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      wallet: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      quantityInAssetUnits: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  loadExchange(overrides?: CallOverrides): Promise<string>;

  loadGovernance(overrides?: CallOverrides): Promise<string>;

  removeAdmin(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExchange(
    newExchange: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    newGovernance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    wallet: PromiseOrValue<string>,
    asset: PromiseOrValue<string>,
    quantityInAssetUnits: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    loadExchange(overrides?: CallOverrides): Promise<string>;

    loadGovernance(overrides?: CallOverrides): Promise<string>;

    removeAdmin(overrides?: CallOverrides): Promise<void>;

    setAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExchange(
      newExchange: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(
      newGovernance: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      wallet: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      quantityInAssetUnits: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ExchangeChanged(address,address)"(
      oldExchange?: null,
      newExchange?: null
    ): ExchangeChangedEventFilter;
    ExchangeChanged(
      oldExchange?: null,
      newExchange?: null
    ): ExchangeChangedEventFilter;

    "GovernanceChanged(address,address)"(
      oldGovernance?: null,
      newGovernance?: null
    ): GovernanceChangedEventFilter;
    GovernanceChanged(
      oldGovernance?: null,
      newGovernance?: null
    ): GovernanceChangedEventFilter;
  };

  estimateGas: {
    loadExchange(overrides?: CallOverrides): Promise<BigNumber>;

    loadGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    removeAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExchange(
      newExchange: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGovernance(
      newGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      wallet: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      quantityInAssetUnits: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    loadExchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loadGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExchange(
      newExchange: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      newGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      wallet: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      quantityInAssetUnits: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
